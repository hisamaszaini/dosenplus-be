  async update(
    id: number,
    dosenId: number,
    rawData: any,
    roles: TypeUserRole,
    file?: Express.Multer.File
  ) {
    const data = parseAndThrow(fullUpdatePengabdianSchema, rawData);

    let newFilePath: string | undefined;
    if (file) {
      newFilePath = await handleUpload({
        file,
        uploadSubfolder: this.UPLOAD_PATH,
      });
    }

    try {
      const result = await this.prisma.$transaction(async (tx) => {
        const existing = await tx.pengabdian.findUniqueOrThrow({ where: { id } });

        if (!roles.includes(TypeUserRole.ADMIN) && existing.dosenId !== dosenId) {
          throw new ForbiddenException('Anda tidak diizinkan mengakses data ini');
        }

        const payload: any = {};

        if ('semesterId' in data) payload.semesterId = data.semesterId;
        if ('kategori' in data) payload.kategori = data.kategori;

        if ('jenisKegiatan' in data) payload.jenisKegiatan = data.jenisKegiatan;
        if ('tingkat' in data) payload.tingkat = data.tingkat;

        const needRecalc =
          'kategori' in payload ||
          'tingkat' in payload ||
          'jenisKegiatan' in payload;

        if (needRecalc) {
          payload.nilaiPak = this.getNilaiPak(
            payload.kategori ?? existing.kategori,
            payload.tingkat ?? existing.tingkat,
            payload.jenisKegiatan ?? existing.jenisKegiatan,
          );
        }

        const { kategori, semesterId, jenisKegiatan, tingkat, ...detailRest } = data;
        if (Object.keys(detailRest).length) {
          payload.detail = {
            ...(typeof existing.detail === 'object' && existing.detail !== null
              ? existing.detail
              : {}),
            ...detailRest,
          };
        }

        if (newFilePath) payload.filePath = newFilePath;

        payload.statusValidasi = StatusValidasi.PENDING;
        payload.catatan = null;

        const updated = await tx.pengabdian.update({
          where: { id },
          data: payload,
        });

        return { updated, existing };
      });

      // Hapus file lama jika ada
      if (newFilePath && result.existing.filePath) {
        await deleteFileFromDisk(result.existing.filePath);
      }

      return {
        success: true,
        message: 'Data berhasil diperbarui',
        data: result.updated,
      };
    } catch (err) {
      if (newFilePath) await deleteFileFromDisk(newFilePath);
      handleUpdateError(err, 'Pengabdian');
    }
  }